{"ast":null,"code":"import * as e from \"react\";\nvar t = function () {\n    var e = {\n        name: \"__LSM__\",\n        middleWares: [],\n        persist: \"action\"\n      },\n      t = {};\n    try {\n      e.storageType = \"undefined\" != typeof sessionStorage ? window.sessionStorage : void 0;\n    } catch (e) {}\n    return {\n      updateStore: function (n) {\n        try {\n          t = e.storageType && JSON.parse(e.storageType.getItem(e.name) || \"\") || n;\n        } catch (e) {\n          t = n;\n        }\n      },\n      saveStore: function () {\n        e.storageType && e.storageType.setItem(e.name, JSON.stringify(t));\n      },\n      get state() {\n        return t;\n      },\n      set state(e) {\n        t = e;\n      },\n      get options() {\n        return e;\n      },\n      set options(t) {\n        e = t;\n      }\n    };\n  }(),\n  n = e.createContext(void 0),\n  o = function (o) {\n    var r = o.children,\n      s = e.useState(t.state),\n      a = s[0],\n      i = s[1];\n    return e.useEffect(function () {\n      \"beforeUnload\" === t.options.persist && (window.onbeforeunload = function () {\n        return t.saveStore();\n      }, t.options.storageType && t.options.storageType.removeItem(t.options.name));\n    }, []), e.createElement(n.Provider, {\n      value: {\n        state: a,\n        setState: i\n      }\n    }, r);\n  };\nfunction r() {\n  return r = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n      for (var o in n) Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o]);\n    }\n    return e;\n  }, r.apply(this, arguments);\n}\nfunction s(e, n) {\n  n && (t.options = r({}, t.options, n)), \"production\" !== process.env.NODE_ENV && \"undefined\" != typeof window && (window.__LSM_NAME__ = t.options.name, window.__LSM_RESET__ = function () {\n    return t.options.storageType && t.options.storageType.removeItem(t.options.name);\n  }), t.updateStore(e);\n}\nfunction a(o) {\n  var r = e.useContext(n),\n    s = r.state,\n    a = r.setState,\n    i = e.useRef(Object.entries(o || {}).reduce(function (e, n) {\n      var o;\n      return Object.assign({}, e, ((o = {})[n[0]] = function (e, n) {\n        return function (o, r) {\n          \"production\" !== process.env.NODE_ENV && (window.__LSM_NAME__ = n.name), t.state = n(t.state, o), t.options.middleWares && (t.state = t.options.middleWares.reduce(function (e, t) {\n            return t(e, n.name, o) || e;\n          }, t.state)), (!r || !r.skipRender) && e(t.state), \"action\" === t.options.persist && t.saveStore();\n        };\n      }(a, n[1]), o));\n    }, {}));\n  return {\n    actions: i.current,\n    state: s,\n    getState: e.useCallback(function () {\n      return t.state;\n    }, [])\n  };\n}\nexport { o as StateMachineProvider, s as createStore, a as useStateMachine };","map":{"version":3,"mappings":";QAGA;IACE,IAAIA,IAA+B;QACjCC,MCL8B;QDM9BC,aAAa;QACbC,SCHM;MAAA;MDKJC,IAAqB;IAEzB;MACEJ,EAAQK,cACoB,sBAAnBC,iBAAiCC,OAAOD,sBAAiBE;IAAAA,CAClE;IAEF,OAAO;MACLC,uBAAYC;QACV;UACEN,IACGJ,EAAQK,eACPM,KAAKC,MAAMZ,EAAQK,YAAYQ,QAAQb,EAAQC,SAAU,OAC3DS;QAAAA,CACF;UACAN,IAAQM;QAAAA;MAAAA;MAGZI;QACEd,EAAQK,eACNL,EAAQK,YAAYU,QAAQf,EAAQC,MAAOU,KAAKK,UAAUZ;MAAAA;MAE1DA;QACF,OAAOA;MAAAA;MAELA,UAAMa;QACRb,IAAQa;MAAAA;MAENjB;QACF,OAAOA;MAAAA;MAELA,YAAQiB;QACVjB,IAAUiB;MAAAA;IAAAA;EAAAA,CAKDC;EErCTC,IAAsBC,EAAMC,mBAChCb;EAGWc,IAAgD;IAAA,IAAGC;MAAAA,IACpCH,EAAMI,SAASC,EAAarB;MAA/CA;MAAOsB;IAUd,OARAN,EAAMO,UAAU;MDXR,mBCYFF,EAAazB,QAAQG,YACvBI,OAAOqB,iBAAiB;QAAA,OAAMH,EAAaX;MAAAA,GAC3CW,EAAazB,QAAQK,eACnBoB,EAAazB,QAAQK,YAAYwB,WAAWJ,EAAazB,QAAQC;IAAAA,GAEpE,KAGDmB,gBAACD,EAAoBW;MAASb,OAAO;QAAEb;QAAOsB;MAAAA;IAAAA,GAC3CH;EAAAA;AAAAA;EAAAA;IAAAA;MAAAA;MAAAA;IAAAA;IAAAA;EAAAA;AAAAA;AAAAA,SCdSQ,EACdC,GACAhC;EAEIA,MACFyB,EAAazB,gBACRyB,EAAazB,SACbA,KAIsB,iBAAzBiC,QAAQC,IAAIC,YACQ,sBAAX5B,WACTA,OAAO6B,eAAeX,EAAazB,QAAQC,MAC3CM,OAAO8B,gBAAgB;IAAA,OACrBZ,EAAazB,QAAQK,eACrBoB,EAAazB,QAAQK,YAAYwB,WAAWJ,EAAazB,QAAQC;EAAAA,IAIvEwB,EAAahB,YAAYuB;AAAAA;AAAAA,SA8BXM,EAIdC;EAMA,QDxCAnB,EAAMoB,WAAqCrB;ICwCnCf;IAAOsB;IACTe,IAAarB,EAAMsB,OACvBC,OAAOC,QAAQL,KAAW,IAAIM,OAC5B,UAACC;MAAAA;MAAAA,OACCH,OAAOI,OAAO,IAAID,qBAxCxB,UACEpB,GACAsB;QAAAA,iBAEDC,GAAmCjD;UACL,iBAAzBiC,QAAQC,IAAIC,aACd5B,OAAM6B,eAAsBY,EAAS/C,OAGvCwB,EAAarB,QAAQ4C,EAASvB,EAAarB,OAAO6C,IAE9CxB,EAAazB,QAAQE,gBACvBuB,EAAarB,QAAQqB,EAAazB,QAAQE,YAAY2C,OACpD,UAACK,GAAcC;YAAAA,OACbA,EAAgBD,GAAcF,EAAS/C,MAAMgD,MAAYC;UAAAA,GAC3DzB,EAAarB,WAIfJ,MAAYA,EAAQoD,eAAe1B,EAASD,EAAarB,QFnDrD,aEqDFqB,EAAazB,QAAQG,WACvBsB,EAAaX;QAAAA;MAAAA,CAmBFuC,CAAe3B;IAAAA,GAE1B;EAIJ,OAAO;IACLa,SAASE,EAAWa;IACpBlD;IACAmD,UAAUnC,EAAMoC,YAAY;MAAA,OAAM/B,EAAarB;IAAAA,GAAO;EAAA;AAAA;AAAA","names":["options","name","middleWares","persist","state","storageType","sessionStorage","window","undefined","updateStore","defaultValues","JSON","parse","getItem","saveStore","setItem","stringify","value","StoreFactory","StateMachineContext","React","createContext","StateMachineProvider","children","useState","storeFactory","setState","useEffect","onbeforeunload","removeItem","Provider","createStore","defaultState","process","env","NODE_ENV","__LSM_NAME__","__LSM_RESET__","useStateMachine","actions","useContext","actionsRef","useRef","Object","entries","reduce","previous","assign","callback","payload","currentValue","currentFunction","skipRender","actionTemplate","current","getState","useCallback"],"sources":["C:\\Users\\User\\Desktop\\redberry-project\\form\\node_modules\\little-state-machine\\src\\logic\\storeFactory.ts","C:\\Users\\User\\Desktop\\redberry-project\\form\\node_modules\\little-state-machine\\src\\constants.ts","C:\\Users\\User\\Desktop\\redberry-project\\form\\node_modules\\little-state-machine\\src\\StateMachineContext.tsx","C:\\Users\\User\\Desktop\\redberry-project\\form\\node_modules\\little-state-machine\\src\\stateMachine.tsx"],"sourcesContent":["import { PERSIST_OPTION, STORE_DEFAULT_NAME } from '../constants';\nimport { GlobalState, StateMachineOptions } from '../types';\n\nfunction StoreFactory() {\n  let options: StateMachineOptions = {\n    name: STORE_DEFAULT_NAME,\n    middleWares: [],\n    persist: PERSIST_OPTION.ACTION,\n  };\n  let state: GlobalState = {};\n\n  try {\n    options.storageType =\n      typeof sessionStorage !== 'undefined' ? window.sessionStorage : undefined;\n  } catch {}\n\n  return {\n    updateStore(defaultValues: GlobalState) {\n      try {\n        state =\n          (options.storageType &&\n            JSON.parse(options.storageType.getItem(options.name!) || '')) ||\n          defaultValues;\n      } catch {\n        state = defaultValues;\n      }\n    },\n    saveStore() {\n      options.storageType &&\n        options.storageType.setItem(options.name!, JSON.stringify(state));\n    },\n    get state() {\n      return state;\n    },\n    set state(value) {\n      state = value;\n    },\n    get options() {\n      return options;\n    },\n    set options(value) {\n      options = value;\n    },\n  };\n}\n\nexport default StoreFactory();\n","export const STORE_DEFAULT_NAME = '__LSM__';\nexport const STORE_ACTION_NAME = '__LSM_NAME__';\nexport const PERSIST_OPTION = {\n  NONE: 'none',\n  ACTION: 'action',\n  UNLOAD: 'beforeUnload',\n} as const;\n","import * as React from 'react';\nimport storeFactory from './logic/storeFactory';\nimport { StateMachineContextValue } from './types';\nimport { PERSIST_OPTION } from './constants';\n\ntype PropsChildren = {\n  children?: React.ReactNode;\n};\n\nconst StateMachineContext = React.createContext<StateMachineContextValue>(\n  undefined as any,\n);\n\nexport const StateMachineProvider: React.FC<PropsChildren> = ({ children }) => {\n  const [state, setState] = React.useState(storeFactory.state);\n\n  React.useEffect(() => {\n    if (storeFactory.options.persist === PERSIST_OPTION.UNLOAD) {\n      window.onbeforeunload = () => storeFactory.saveStore();\n      storeFactory.options.storageType &&\n        storeFactory.options.storageType.removeItem(storeFactory.options.name!);\n    }\n  }, []);\n\n  return (\n    <StateMachineContext.Provider value={{ state, setState }}>\n      {children}\n    </StateMachineContext.Provider>\n  );\n};\n\nexport const useStateMachineContext = () =>\n  React.useContext<StateMachineContextValue>(StateMachineContext);\n","import * as React from 'react';\nimport { useStateMachineContext } from './StateMachineContext';\nimport storeFactory from './logic/storeFactory';\nimport {\n  StateMachineOptions,\n  GlobalState,\n  AnyCallback,\n  AnyActions,\n  ActionsOutput,\n} from './types';\nimport { PERSIST_OPTION, STORE_ACTION_NAME } from './constants';\n\nexport function createStore(\n  defaultState: GlobalState,\n  options?: StateMachineOptions,\n) {\n  if (options) {\n    storeFactory.options = {\n      ...storeFactory.options,\n      ...options,\n    };\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof window !== 'undefined') {\n      window.__LSM_NAME__ = storeFactory.options.name;\n      window.__LSM_RESET__ = () =>\n        storeFactory.options.storageType &&\n        storeFactory.options.storageType.removeItem(storeFactory.options.name!);\n    }\n  }\n\n  storeFactory.updateStore(defaultState);\n}\n\nconst actionTemplate =\n  <TCallback extends AnyCallback>(\n    setState: React.Dispatch<React.SetStateAction<GlobalState>>,\n    callback: TCallback,\n  ) =>\n  (payload: Parameters<TCallback>[1], options?: { skipRender: boolean }) => {\n    if (process.env.NODE_ENV !== 'production') {\n      window[STORE_ACTION_NAME] = callback.name;\n    }\n\n    storeFactory.state = callback(storeFactory.state, payload);\n\n    if (storeFactory.options.middleWares) {\n      storeFactory.state = storeFactory.options.middleWares.reduce(\n        (currentValue, currentFunction) =>\n          currentFunction(currentValue, callback.name, payload) || currentValue,\n        storeFactory.state,\n      );\n    }\n\n    (!options || !options.skipRender) && setState(storeFactory.state);\n\n    if (storeFactory.options.persist === PERSIST_OPTION.ACTION) {\n      storeFactory.saveStore();\n    }\n  };\n\nexport function useStateMachine<\n  TCallback extends AnyCallback,\n  TActions extends AnyActions<TCallback>,\n>(\n  actions?: TActions,\n): {\n  actions: ActionsOutput<TCallback, TActions>;\n  state: GlobalState;\n  getState: () => GlobalState;\n} {\n  const { state, setState } = useStateMachineContext();\n  const actionsRef = React.useRef(\n    Object.entries(actions || {}).reduce(\n      (previous, [key, callback]) =>\n        Object.assign({}, previous, {\n          [key]: actionTemplate(setState, callback),\n        }),\n      {} as ActionsOutput<TCallback, TActions>,\n    ),\n  );\n\n  return {\n    actions: actionsRef.current,\n    state,\n    getState: React.useCallback(() => storeFactory.state, []),\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}